{"version":3,"sources":["components/index.tsx","components/SvgCard/SvgCard.tsx","resources/exampleList.tsx","resources/objects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SvgCard","state","svg","props","handleChange","e","key","target","newSvg","value","setState","getHtml","html","tag","Object","keys","map","prop","replace","toLowerCase","render","CardGroup","Card","style","width","Header","header","Body","padding","height","React","createElement","Footer","className","bg","InputGroup","Prepend","Text","FormControl","disabled","onChange","Component","cx","cy","r","fill","stroke","strokeWidth","x","y","rx","ry","fillOpacity","strokeOpacity","App","examples","example","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAEeA,E,2MCQbC,MAAQ,CACNC,IAAK,EAAKC,MAAMD,K,EAGlBE,aAAe,SAACC,EAAwCC,GACtD,GAAID,GAAKA,EAAEE,OAAQ,CACjB,IAAMC,EAAS,EAAKP,MAAMC,IACzB,EAAKD,MAAMC,IAAYI,GAAOD,EAAEE,OAAOE,MACxC,EAAKC,SAAS,CAACR,IAAKM,M,EAIxBG,QAAU,WACR,IAAIC,EAAO,GACPC,EAAM,GAaV,OAZAC,OAAOC,KAAK,EAAKd,MAAMC,KAAKc,KAAI,SAACV,GAC/B,GAAY,QAARA,EACFO,EAAO,EAAKZ,MAAMC,IAAYI,OACzB,CACL,IAAMG,EAAS,EAAKR,MAAMC,IAAYI,GACtC,GAAIG,EAAO,CACT,IAAMQ,EAAOX,EAAIY,QAAQ,WAAY,OAAOC,cAC5CP,EAAI,WAAOA,EAAP,YAAeK,EAAf,YAAuBR,QAIjCG,EAAI,WAAOC,EAAP,YAAcD,EAAd,cAAwBC,EAAxB,M,EAINO,OAAS,WACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAO,UACnB,kBAACF,EAAA,EAAKG,OAAN,KAAc,EAAKtB,MAAMuB,QACzB,kBAACJ,EAAA,EAAKK,KAAN,CAAWJ,MAAO,CAACK,QAAS,SAC1B,yBAAKJ,MAAM,QAAQK,OAAO,QACvBC,IAAMC,cAAc,EAAK5B,MAAMD,IAAIW,IAAK,EAAKV,MAAMD,OAGxD,kBAACoB,EAAA,EAAKU,OAAN,CAAaC,UAAU,2BAA2BV,MAAO,CAACM,OAAQ,OAAQD,QAAS,SACjF,8BAAO,EAAKjB,aAGhB,kBAACW,EAAA,EAAD,CAAMY,GAAG,QAAQD,UAAU,gBAAgBV,MAAO,CAACK,QAAS,OAAQC,OAAQ,UACzEf,OAAOC,KAAK,EAAKd,MAAMC,KAAKc,KAAI,SAAAV,GAAG,OAClC,kBAAC6B,EAAA,EAAD,CAAYF,UAAU,QACpB,kBAACE,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,KAAkB/B,IAEpB,kBAACgC,EAAA,EAAD,CACEC,SAAkB,QAARjC,EACVG,MAAQ,EAAKR,MAAMC,IAAYI,GAC/BkC,SAAU,SAACnC,GACT,EAAKD,aAAaC,EAAGC,a,6BAvDFwB,IAAMW,WCF5B,GACb,CACEf,OAAQ,SACRxB,IC4C0B,CAC5BW,IAAK,SACL6B,GAAI,MACJC,GAAI,KACJC,EAAG,KACHC,KAAM,MACNC,OAAQ,QACRC,YAAa,MDjDb,CACErB,OAAQ,YACRxB,ICkD6B,CAC/BW,IAAK,OACLmC,EAAG,KACHC,EAAG,KACHC,GAAI,KACJC,GAAI,KACJ3B,MAAO,MACPK,OAAQ,MACRgB,KAAM,eACNC,OAAQ,aACRC,YAAa,IACbK,YAAa,MACbC,cAAe,SCvDFC,G,uLAdX,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,OACZsB,EAASvC,KAAI,SAAAwC,GAAO,OACnB,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAASP,OAAQ8B,EAAQ9B,OAAQxB,IAAKsD,EAAQtD,gB,GAP1C4B,IAAMW,YCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,MCVnCC,IAAS1C,OAAO,kBAAC,EAAD,MAAS2C,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0356030.chunk.js","sourcesContent":["import SvgCard from './SvgCard/SvgCard';\n\nexport default SvgCard;\n","import React from 'react';\nimport {Card, InputGroup, FormControl, CardGroup} from 'react-bootstrap';\nimport {figure} from '../../resources/objects';\n\ntype cardProps = {\n  header: string;\n  svg: figure;\n};\n\nexport default class SvgCard extends React.Component<cardProps> {\n  state = {\n    svg: this.props.svg,\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>, key: string): void => {\n    if (e && e.target) {\n      const newSvg = this.state.svg;\n      (this.state.svg as any)[key] = e.target.value;\n      this.setState({svg: newSvg});\n    }\n  };\n\n  getHtml = (): string => {\n    let html = '';\n    let tag = '';\n    Object.keys(this.state.svg).map((key: string) => {\n      if (key === 'tag') {\n        tag = (this.state.svg as any)[key];\n      } else {\n        const value = (this.state.svg as any)[key];\n        if (value) {\n          const prop = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n          html = ` ${html} ${prop}=${value}`;\n        }\n      }\n    });\n    html = `<${tag} ${html}></${tag}>`;\n    return html;\n  };\n\n  render = (): JSX.Element => {\n    return (\n      <CardGroup>\n        <Card style={{width: '18rem'}}>\n          <Card.Header>{this.props.header}</Card.Header>\n          <Card.Body style={{padding: '0rem'}}>\n            <svg width='18rem' height='9rem'>\n              {React.createElement(this.props.svg.tag, this.props.svg)}\n            </svg>\n          </Card.Body>\n          <Card.Footer className='text-muted overflow-auto' style={{height: '5rem', padding: '0rem'}}>\n            <code>{this.getHtml()}</code>\n          </Card.Footer>\n        </Card>\n        <Card bg='light' className='overflow-auto' style={{padding: '1rem', height: '18rem'}}>\n          {Object.keys(this.state.svg).map(key => (\n            <InputGroup className='mb-2'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>{key}</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                disabled={key === 'tag'}\n                value={(this.state.svg as any)[key]}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  this.handleChange(e, key);\n                }}\n              />\n            </InputGroup>\n          ))}\n        </Card>\n      </CardGroup>\n    );\n  };\n}\n","import {circle, rectangle, figure} from './objects';\n\nexport type example = {\n  header: string;\n  svg: figure;\n};\n\nexport default [\n  {\n    header: 'Circle',\n    svg: circle,\n  },\n  {\n    header: 'Rectangle',\n    svg: rectangle,\n  },\n];\n","export type ellipse = {\n  cx: string;\n  cy: string;\n  rx: string;\n  ry: string;\n  fill?: string;\n  fillOpacity?: string;\n  stroke?: string;\n  strokeWidth?: string;\n  strokeOpacity?: string;\n};\n\nexport type line = {\n  x1: string;\n  x2: string;\n  y1: string;\n  y2: string;\n  stroke?: string;\n  strokeWidth?: string;\n  strokeOpacity?: string;\n};\n\nexport type polygon = {\n  points: string; //100,10 40,198 190,78 10,78 160,198\n  stroke?: string;\n  strokeWidth?: string;\n  strokeOpacity?: string;\n  fillRule?: string; //nonzero, evenodd\n};\n\nexport type figure = {\n  tag: string;\n  width?: string;\n  height?: string;\n  points?: string;\n  x?: string;\n  y?: string;\n  r?: string;\n  x1?: string;\n  x2?: string;\n  y1?: string;\n  y2?: string;\n  rx?: string;\n  ry?: string;\n  cx?: string;\n  cy?: string;\n  fill?: string;\n  fillOpacity?: string;\n  fillRule?: string;\n  stroke?: string;\n  strokeWidth?: string;\n  strokeOpacity?: string;\n};\n\nexport const circle: figure = {\n  tag: 'circle',\n  cx: '143',\n  cy: '70',\n  r: '50',\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: '4',\n};\n\nexport const rectangle: figure = {\n  tag: 'rect',\n  x: '95',\n  y: '20',\n  rx: '20',\n  ry: '20',\n  width: '100',\n  height: '100',\n  fill: 'rgb(0,0,255)',\n  stroke: 'rgb(0,0,0)',\n  strokeWidth: '3',\n  fillOpacity: '0.1',\n  strokeOpacity: '0.9',\n};\n","import React from 'react';\nimport SvgCard from './components/index';\nimport examples from './resources/exampleList';\nimport './App.css';\n\nclass App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <div className='App'>\n        <div className='row'>\n          {examples.map(example => (\n            <div className='col'>\n              <SvgCard header={example.header} svg={example.svg} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}