{"version":3,"sources":["components/index.tsx","components/SvgCard/SvgCard.tsx","resources/exampleList.tsx","resources/objects.tsx","App.tsx","index.tsx"],"names":["SvgCard","state","svg","props","handleChange","e","key","target","newSvg","value","setState","getHtmlCode","tag","content","Object","keys","map","prop","replace","toLowerCase","getDocLink","name","url","docLink","formattedName","render","CardGroup","style","width","padding","Card","Header","header","Body","height","React","createElement","text","Footer","className","bg","InputGroup","Prepend","Text","href","rel","FormControl","disabled","onChange","Component","cx","cy","r","fill","stroke","strokeWidth","x","y","rx","ry","fillOpacity","strokeOpacity","x1","x2","y1","y2","points","fillRule","transform","App","examples","example","ReactDOM","document","getElementById"],"mappings":"yTAEeA,E,2MCQbC,MAAQ,CACNC,IAAK,EAAKC,MAAMD,K,EAGlBE,aAAe,SAACC,EAAwCC,GACtD,GAAID,GAAKA,EAAEE,OAAQ,CACjB,IAAMC,EAAS,EAAKP,MAAMC,IACzB,EAAKD,MAAMC,IAAYI,GAAOD,EAAEE,OAAOE,MACxC,EAAKC,SAAS,CAACR,IAAKM,M,EAIxBG,YAAc,WACZ,IAAIR,EAAQ,GACRS,EAAM,GACNC,EAAU,GAcd,OAbAC,OAAOC,KAAK,EAAKd,MAAMC,KAAKc,KAAI,SAACV,GAC/B,GAAY,QAARA,EACFM,EAAO,EAAKX,MAAMC,IAAYI,QACzB,GAAY,SAARA,EACTO,EAAW,EAAKZ,MAAMC,IAAYI,OAC7B,CACL,IAAMG,EAAS,EAAKR,MAAMC,IAAYI,GACtC,GAAIG,EAAO,CACT,IAAMQ,EAAOX,EAAIY,QAAQ,WAAY,OAAOC,cAC5ChB,EAAK,WAAOA,EAAP,YAAgBc,EAAhB,aAAyBR,EAAzB,UAIL,IAAN,OAAWG,EAAX,YAAkBT,EAAlB,YAA2BU,EAA3B,aAAuCD,EAAvC,M,EAGFQ,WAAa,SAACC,GACZ,IAAMC,EAAM,mDACRC,EAAU,GACd,GAAa,QAATF,EACFE,EAAO,UAAMD,EAAN,oBAAsB,EAAKrB,MAAMC,IAAYmB,QAC/C,CACL,IAAMG,EAAgBH,EAAKH,QAAQ,WAAY,OAAOC,cACtDI,EAAO,UAAMD,EAAN,sBAAuBE,GAEhC,OAAOD,G,EAGTE,OAAS,WACP,OACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAO,QAASC,QAAS,SAC1C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAACC,MAAO,UACnB,kBAACE,EAAA,EAAKC,OAAN,KAAc,EAAK5B,MAAM6B,QACzB,kBAACF,EAAA,EAAKG,KAAN,CAAWN,MAAO,CAACE,QAAS,SAC1B,yBAAKD,MAAM,QAAQM,OAAO,QACvBC,IAAMC,cAAc,EAAKjC,MAAMD,IAAIU,IAAK,EAAKT,MAAMD,IAAK,EAAKC,MAAMD,IAAImC,QAG5E,kBAACP,EAAA,EAAKQ,OAAN,CAAaC,UAAU,2BAA2BZ,MAAO,CAACO,OAAQ,OAAQL,QAAS,SACjF,8BAAO,EAAKlB,iBAGhB,kBAACmB,EAAA,EAAD,CAAMU,GAAG,QAAQD,UAAU,gBAAgBZ,MAAO,CAACE,QAAS,OAAQK,OAAQ,UACzEpB,OAAOC,KAAK,EAAKd,MAAMC,KAAKc,KAAI,SAAAV,GAAG,OAClC,kBAACmC,EAAA,EAAD,CAAYF,UAAU,QACpB,kBAACE,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,KACE,uBAAGC,KAAM,EAAKxB,WAAWd,GAAMC,OAAO,SAASsC,IAAI,uBAChDvC,KAIP,kBAACwC,EAAA,EAAD,CACEC,SAAkB,QAARzC,EACVG,MAAQ,EAAKR,MAAMC,IAAYI,GAC/B0C,SAAU,SAAC3C,GACT,EAAKD,aAAaC,EAAGC,a,6BAzEF6B,IAAMc,WCF5B,GACb,CACEjB,OAAQ,SACR9B,ICqC0B,CAC5BU,IAAK,SACLsC,GAAI,MACJC,GAAI,KACJC,EAAG,KACHC,KAAM,MACNC,OAAQ,QACRC,YAAa,MD1Cb,CACEvB,OAAQ,YACR9B,IC2C6B,CAC/BU,IAAK,OACL4C,EAAG,KACHC,EAAG,KACHC,GAAI,KACJC,GAAI,KACJ/B,MAAO,MACPM,OAAQ,MACRmB,KAAM,eACNC,OAAQ,aACRC,YAAa,IACbK,YAAa,MACbC,cAAe,QDrDf,CACE7B,OAAQ,UACR9B,ICiE2B,CAC7BU,IAAK,UACLsC,GAAI,MACJC,GAAI,KACJO,GAAI,MACJC,GAAI,KACJN,KAAM,QACNO,YAAa,MACbN,OAAQ,OACRC,YAAa,IACbM,cAAe,QDzEf,CACE7B,OAAQ,OACR9B,ICkDwB,CAC1BU,IAAK,OACLkD,GAAI,KACJC,GAAI,MACJC,GAAI,KACJC,GAAI,MACJX,OAAQ,SACRC,YAAa,KACbM,cAAe,QDxDf,CACE7B,OAAQ,UACR9B,ICsE2B,CAC7BU,IAAK,UACLsD,OAAQ,oCACRZ,OAAQ,QACRC,YAAa,IACbM,cAAe,MACfR,KAAM,OACNc,SAAU,YD3EV,CACEnC,OAAQ,WACR9B,IC4E4B,CAC9BU,IAAK,WACLsD,OAAQ,oDACRZ,OAAQ,SACRC,YAAa,IACbM,cAAe,GACfR,KAAM,QACNc,SAAU,KDjFV,CACEnC,OAAQ,OACR9B,ICkFwB,CAC1BU,IAAK,OACLyB,KAAM,cACNmB,EAAG,MACHC,EAAG,KACHJ,KAAM,MACNe,UAAW,sBCrGEC,G,uLAdX,OACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,OACZ+B,EAAStD,KAAI,SAAAuD,GAAO,OACnB,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAASP,OAAQuC,EAAQvC,OAAQ9B,IAAKqE,EAAQrE,gB,GAP1CiC,IAAMc,Y,MCCxBuB,IAAS/C,OAAO,kBAAC,EAAD,MAASgD,SAASC,eAAe,W","file":"static/js/main.6f4046e7.chunk.js","sourcesContent":["import SvgCard from './SvgCard/SvgCard';\n\nexport default SvgCard;\n","import React from 'react';\nimport {Card, InputGroup, FormControl, CardGroup} from 'react-bootstrap';\nimport {figure} from '../../resources/objects';\n\ntype cardProps = {\n  header: string;\n  svg: figure;\n};\n\nexport default class SvgCard extends React.Component<cardProps> {\n  state = {\n    svg: this.props.svg,\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>, key: string): void => {\n    if (e && e.target) {\n      const newSvg = this.state.svg;\n      (this.state.svg as any)[key] = e.target.value;\n      this.setState({svg: newSvg});\n    }\n  };\n\n  getHtmlCode = (): string => {\n    let props = '';\n    let tag = '';\n    let content = '';\n    Object.keys(this.state.svg).map((key: string) => {\n      if (key === 'tag') {\n        tag = (this.state.svg as any)[key];\n      } else if (key === 'text') {\n        content = (this.state.svg as any)[key];\n      } else {\n        const value = (this.state.svg as any)[key];\n        if (value) {\n          const prop = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n          props = ` ${props} ${prop}=\"${value}\"`;\n        }\n      }\n    });\n    return `<${tag} ${props}>${content}</${tag}>`;\n  };\n\n  getDocLink = (name: string): string => {\n    const url = 'https://developer.mozilla.org/en-US/docs/Web/SVG';\n    let docLink = '';\n    if (name === 'tag') {\n      docLink = `${url}/Element/${(this.state.svg as any)[name]}`;\n    } else {\n      const formattedName = name.replace(/([A-Z])/g, '-$1').toLowerCase();\n      docLink = `${url}/Attribute/${formattedName}`;\n    }\n    return docLink;\n  };\n\n  render = (): JSX.Element => {\n    return (\n      <CardGroup style={{width: '38rem', padding: '1rem'}}>\n        <Card style={{width: '18rem'}}>\n          <Card.Header>{this.props.header}</Card.Header>\n          <Card.Body style={{padding: '0rem'}}>\n            <svg width='18rem' height='9rem'>\n              {React.createElement(this.props.svg.tag, this.props.svg, this.props.svg.text)}\n            </svg>\n          </Card.Body>\n          <Card.Footer className='text-muted overflow-auto' style={{height: '5rem', padding: '0rem'}}>\n            <code>{this.getHtmlCode()}</code>\n          </Card.Footer>\n        </Card>\n        <Card bg='light' className='overflow-auto' style={{padding: '1rem', height: '18rem'}}>\n          {Object.keys(this.state.svg).map(key => (\n            <InputGroup className='mb-2'>\n              <InputGroup.Prepend>\n                <InputGroup.Text>\n                  <a href={this.getDocLink(key)} target='_blank' rel='noopener noreferrer'>\n                    {key}\n                  </a>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                disabled={key === 'tag'}\n                value={(this.state.svg as any)[key]}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  this.handleChange(e, key);\n                }}\n              />\n            </InputGroup>\n          ))}\n        </Card>\n      </CardGroup>\n    );\n  };\n}\n","import * as objects from './objects';\n\nexport type example = {\n  header: string;\n  svg: objects.figure;\n};\n\nexport default [\n  {\n    header: 'Circle',\n    svg: objects.circle,\n  },\n  {\n    header: 'Rectangle',\n    svg: objects.rectangle,\n  },\n  {\n    header: 'Ellipse',\n    svg: objects.ellipse,\n  },\n  {\n    header: 'Line',\n    svg: objects.line,\n  },\n  {\n    header: 'Polygon',\n    svg: objects.polygon,\n  },\n  {\n    header: 'Polyline',\n    svg: objects.polyline,\n  },\n  {\n    header: 'Text',\n    svg: objects.text,\n  },\n];\n","export type figure = {\n  tag: string;\n  width?: string;\n  height?: string;\n  points?: string;\n  x?: string;\n  y?: string;\n  r?: string;\n  x1?: string;\n  x2?: string;\n  y1?: string;\n  y2?: string;\n  rx?: string;\n  ry?: string;\n  cx?: string;\n  cy?: string;\n\n  text?: string;\n\n  clipPath?: string;\n  clipRule?: string;\n  color?: string;\n  colorInterpolation?: string;\n  colorRendering?: string;\n  cursor?: string;\n  display?: string;\n  fill?: string;\n  fillOpacity?: string;\n  fillRule?: string;\n  filter?: string;\n  mask?: string;\n  opacity?: string;\n  pointerEvents?: string;\n  shapeRendering?: string;\n  stroke?: string;\n  strokeDasharray?: string;\n  strokeDashoffset?: string;\n  strokeLinecap?: string;\n  strokeLinejoin?: string;\n  strokeMiterlimit?: string;\n  strokeOpacity?: string;\n  strokeWidth?: string;\n  transform?: string;\n  vectorEffect?: string;\n  visibility?: string;\n};\n\nexport const circle: figure = {\n  tag: 'circle',\n  cx: '135',\n  cy: '70',\n  r: '50',\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: '4',\n};\n\nexport const rectangle: figure = {\n  tag: 'rect',\n  x: '88',\n  y: '20',\n  rx: '20',\n  ry: '20',\n  width: '100',\n  height: '100',\n  fill: 'rgb(0,0,255)',\n  stroke: 'rgb(0,0,0)',\n  strokeWidth: '3',\n  fillOpacity: '0.1',\n  strokeOpacity: '0.9',\n};\n\nexport const line: figure = {\n  tag: 'line',\n  x1: '40',\n  x2: '210',\n  y1: '40',\n  y2: '100',\n  stroke: 'purple',\n  strokeWidth: '20',\n  strokeOpacity: '0.9',\n};\n\nexport const ellipse: figure = {\n  tag: 'ellipse',\n  cx: '135',\n  cy: '70',\n  rx: '100',\n  ry: '40',\n  fill: 'green',\n  fillOpacity: '0.7',\n  stroke: 'blue',\n  strokeWidth: '6',\n  strokeOpacity: '0.2',\n};\n\nexport const polygon: figure = {\n  tag: 'polygon',\n  points: '130,0 70,141 220,51 40,51 190,141',\n  stroke: 'black',\n  strokeWidth: '2',\n  strokeOpacity: '0.5',\n  fill: 'grey',\n  fillRule: 'evenodd',\n};\n\nexport const polyline: figure = {\n  tag: 'polyline',\n  points: '5,5 20,5 20,45 75,45 75,130 150,130 150,45 250,20',\n  stroke: 'orange',\n  strokeWidth: '4',\n  strokeOpacity: '',\n  fill: 'white',\n  fillRule: '',\n};\n\nexport const text: figure = {\n  tag: 'text',\n  text: 'Sample text',\n  x: '100',\n  y: '10',\n  fill: 'red',\n  transform: 'rotate(30 20,40)',\n};\n\nexport const stuff2: figure = {\n  tag: 'stuff',\n};\n\nexport const stuff3: figure = {\n  tag: 'stuff',\n};\n\nexport const stuff4: figure = {\n  tag: 'stuff',\n};\n\nexport const stuff5: figure = {\n  tag: 'stuff',\n};\n\nexport const stuff6: figure = {\n  tag: 'stuff',\n};\n","import React from 'react';\nimport SvgCard from './components/index';\nimport examples from './resources/exampleList';\nimport './App.css';\n\nclass App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <div className='App'>\n        <div className='row'>\n          {examples.map(example => (\n            <div className='col'>\n              <SvgCard header={example.header} svg={example.svg} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}